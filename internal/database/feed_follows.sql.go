// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
WITH cff AS
(
    INSERT INTO feed_follows (id, created_at, updated_at, user_id,feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT 
    cff.id AS ffID,
    cff.created_at,
    cff.updated_at,
    cff.user_id AS userID,
    cff.feed_id AS feedID,
    users.name AS userName,
    feeds.name AS feedName
FROM 
    cff
JOIN 
    feeds ON feeds.id = cff.feed_id
JOIN 
    users ON users.id = cff.user_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	Ffid      uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Userid    uuid.UUID
	Feedid    uuid.UUID
	Username  string
	Feedname  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.Ffid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Userid,
		&i.Feedid,
		&i.Username,
		&i.Feedname,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT
    feeds.name AS feedName,
    users.name AS userName
FROM
    feed_follows
JOIN
    feeds ON feeds.id = feed_follows.feed_id
JOIN
    users ON users.id = feed_follows.user_id
WHERE
    users.name = $1
`

type GetFeedFollowsForUserRow struct {
	Feedname string
	Username string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, name string) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.Feedname, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
